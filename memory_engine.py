#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AutoEarnPro - Memory Engine
Daje AI asistentu pravu memoriju, uƒçenje i inteligenciju
"""

import json
import pickle
import hashlib
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from collections import defaultdict, deque
import logging

logger = logging.getLogger(__name__)

@dataclass
class Memory:
    """Pojedinaƒçna memorija"""
    id: str
    content: str
    context: Dict[str, Any]
    timestamp: datetime
    importance: float  # 0.0 - 1.0
    category: str
    tags: List[str]
    access_count: int
    last_accessed: datetime
    emotional_tone: str
    user_satisfaction: float

@dataclass
class ConversationMemory:
    """Memorija konverzacije"""
    user_id: str
    conversation_id: str
    messages: List[Dict[str, Any]]
    context: Dict[str, Any]
    start_time: datetime
    last_activity: datetime
    topics: List[str]
    sentiment: str
    user_preferences: Dict[str, Any]

@dataclass
class LearningPattern:
    """Obrazac uƒçenja"""
    pattern_type: str
    input_pattern: str
    output_pattern: str
    success_rate: float
    usage_count: int
    last_used: datetime
    context: Dict[str, Any]

class MemoryEngine:
    """Napredni Memory Engine za AI inteligenciju"""
    
    def __init__(self, memory_file: str = "ai_memory.pkl", max_memories: int = 10000):
        self.memory_file = memory_file
        self.max_memories = max_memories
        
        # Glavne memorije
        self.memories: Dict[str, Memory] = {}
        self.conversation_memories: Dict[str, ConversationMemory] = {}
        self.learning_patterns: Dict[str, LearningPattern] = {}
        
        # Indeksi za brzo pretra≈æivanje
        self.category_index: Dict[str, List[str]] = defaultdict(list)
        self.tag_index: Dict[str, List[str]] = defaultdict(list)
        self.temporal_index: Dict[str, List[str]] = defaultdict(list)
        
        # Cache za brz pristup
        self.recent_memories: deque = deque(maxlen=100)
        self.frequently_accessed: Dict[str, int] = defaultdict(int)
        
        # Uƒçitaj postojeƒáe memorije
        self._load_memories()
        
        logger.info("üß† Memory Engine uspe≈°no inicijalizovan!")
    
    def _load_memories(self):
        """Uƒçitava memorije iz fajla"""
        try:
            with open(self.memory_file, 'rb') as f:
                data = pickle.load(f)
                self.memories = data.get('memories', {})
                self.conversation_memories = data.get('conversations', {})
                self.learning_patterns = data.get('patterns', {})
                logger.info(f"‚úÖ Uƒçitano {len(self.memories)} memorija")
        except FileNotFoundError:
            logger.info("üìù Kreiran novi memory fajl")
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri uƒçitavanju memorija: {e}")
    
    def _save_memories(self):
        """ƒåuva memorije u fajl"""
        try:
            data = {
                'memories': self.memories,
                'conversations': self.conversation_memories,
                'patterns': self.learning_patterns
            }
            with open(self.memory_file, 'wb') as f:
                pickle.dump(data, f)
            logger.debug("üíæ Memorije saƒçuvane")
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri ƒçuvanju memorija: {e}")
    
    def create_memory(self, content: str, context: Dict[str, Any], category: str = "general", 
                      importance: float = 0.5, tags: List[str] = None) -> str:
        """Kreira novu memoriju"""
        try:
            memory_id = hashlib.md5(f"{content}{datetime.now()}".encode()).hexdigest()
            
            memory = Memory(
                id=memory_id,
                content=content,
                context=context,
                timestamp=datetime.now(),
                importance=importance,
                category=category,
                tags=tags or [],
                access_count=0,
                last_accessed=datetime.now(),
                emotional_tone=self._analyze_emotional_tone(content),
                user_satisfaction=0.5
            )
            
            self.memories[memory_id] = memory
            
            # A≈æuriraj indekse
            self._update_indexes(memory)
            
            # Proveri limit memorija
            if len(self.memories) > self.max_memories:
                self._cleanup_old_memories()
            
            self._save_memories()
            logger.info(f"üß† Nova memorija kreirana: {category} - {content[:50]}...")
            
            return memory_id
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri kreiranju memorije: {e}")
            return None
    
    def _update_indexes(self, memory: Memory):
        """A≈æurira indekse za brzo pretra≈æivanje"""
        # Kategorija indeks
        self.category_index[memory.category].append(memory.id)
        
        # Tag indeks
        for tag in memory.tags:
            self.tag_index[tag].append(memory.id)
        
        # Temporal indeks (po danima)
        day_key = memory.timestamp.strftime("%Y-%m-%d")
        self.temporal_index[day_key].append(memory.id)
    
    def search_memories(self, query: str, category: str = None, tags: List[str] = None, 
                       limit: int = 10) -> List[Memory]:
        """Pretra≈æuje memorije na osnovu upita"""
        try:
            query_lower = query.lower()
            results = []
            
            for memory in self.memories.values():
                score = 0
                
                # Tekstualna sliƒçnost
                if query_lower in memory.content.lower():
                    score += 3
                
                # Kategorija
                if category and memory.category == category:
                    score += 2
                
                # Tagovi
                if tags:
                    for tag in tags:
                        if tag in memory.tags:
                            score += 1
                
                # Va≈ænost
                score += memory.importance
                
                # Frekvencija pristupa
                score += min(memory.access_count * 0.1, 1.0)
                
                if score > 0:
                    results.append((memory, score))
            
            # Sortiraj po skoru
            results.sort(key=lambda x: x[1], reverse=True)
            
            # Vrati top rezultate
            return [memory for memory, score in results[:limit]]
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri pretra≈æivanju memorija: {e}")
            return []
    
    def get_contextual_memories(self, current_context: Dict[str, Any], limit: int = 5) -> List[Memory]:
        """Dohvata memorije relevantne za trenutni kontekst"""
        try:
            relevant_memories = []
            
            for memory in self.memories.values():
                relevance_score = self._calculate_context_relevance(memory, current_context)
                if relevance_score > 0.3:  # Prag relevantnosti
                    relevant_memories.append((memory, relevance_score))
            
            # Sortiraj po relevantnosti
            relevant_memories.sort(key=lambda x: x[1], reverse=True)
            
            return [memory for memory, score in relevant_memories[:limit]]
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri dohvatanju kontekstualnih memorija: {e}")
            return []
    
    def _calculate_context_relevance(self, memory: Memory, current_context: Dict[str, Any]) -> float:
        """Raƒçuna relevantnost memorije za trenutni kontekst"""
        try:
            relevance = 0.0
            
            # Poredi tagove
            for tag in memory.tags:
                if tag in str(current_context).lower():
                    relevance += 0.2
            
            # Poredi kategorije
            if memory.category in str(current_context).lower():
                relevance += 0.3
            
            # Temporalna relevantnost (novije memorije su relevantnije)
            days_old = (datetime.now() - memory.timestamp).days
            if days_old < 7:
                relevance += 0.2
            elif days_old < 30:
                relevance += 0.1
            
            # Va≈ænost memorije
            relevance += memory.importance * 0.2
            
            return min(relevance, 1.0)
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri raƒçunanju relevantnosti: {e}")
            return 0.0
    
    def learn_from_interaction(self, user_input: str, ai_response: str, user_satisfaction: float, 
                              context: Dict[str, Any]):
        """Uƒçi iz interakcije sa korisnikom"""
        try:
            # Kreiraj memoriju o interakciji
            interaction_content = f"User: {user_input}\nAI: {ai_response}"
            self.create_memory(
                content=interaction_content,
                context=context,
                category="interaction",
                importance=user_satisfaction,
                tags=["interaction", "learning", "user_feedback"]
            )
            
            # A≈æuriraj learning pattern
            pattern_key = hashlib.md5(user_input.lower().encode()).hexdigest()
            
            if pattern_key in self.learning_patterns:
                pattern = self.learning_patterns[pattern_key]
                pattern.usage_count += 1
                pattern.success_rate = (pattern.success_rate + user_satisfaction) / 2
                pattern.last_used = datetime.now()
            else:
                new_pattern = LearningPattern(
                    pattern_type="user_interaction",
                    input_pattern=user_input.lower(),
                    output_pattern=ai_response,
                    success_rate=user_satisfaction,
                    usage_count=1,
                    last_used=datetime.now(),
                    context=context
                )
                self.learning_patterns[pattern_key] = new_pattern
            
            # A≈æuriraj user preferences
            self._update_user_preferences(context, user_satisfaction)
            
            logger.info(f"üß† Nauƒçeno iz interakcije: satisfaction={user_satisfaction}")
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri uƒçenju iz interakcije: {e}")
    
    def _update_user_preferences(self, context: Dict[str, Any], satisfaction: float):
        """A≈æurira preferencije korisnika"""
        try:
            # Analiziraj kontekst i a≈æuriraj preferencije
            for key, value in context.items():
                if isinstance(value, str) and len(value) > 3:
                    # Dodaj u tagove za buduƒáe pretra≈æivanje
                    if satisfaction > 0.7:  # Korisnik je zadovoljan
                        self._add_preference_tag(key, value, positive=True)
                    elif satisfaction < 0.3:  # Korisnik nije zadovoljan
                        self._add_preference_tag(key, value, positive=False)
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri a≈æuriranju preferencija: {e}")
    
    def _add_preference_tag(self, key: str, value: str, positive: bool):
        """Dodaje tag preferencije"""
        try:
            tag = f"pref_{key}_{value}"
            if positive:
                tag += "_positive"
            else:
                tag += "_negative"
            
            # Kreiraj memoriju o preferenciji
            self.create_memory(
                content=f"User preference: {key}={value} ({'positive' if positive else 'negative'})",
                context={"preference": True, "key": key, "value": value, "positive": positive},
                category="preference",
                importance=0.8,
                tags=[tag, "preference", "user_learning"]
            )
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri dodavanju preference tag-a: {e}")
    
    def generate_intelligent_response(self, user_input: str, context: Dict[str, Any]) -> str:
        """Generi≈°e inteligentan odgovor na osnovu memorija"""
        try:
            # Pretra≈æi relevantne memorije
            relevant_memories = self.get_contextual_memories(context, limit=3)
            
            if not relevant_memories:
                return "Izvinjavam se, nemam dovoljno informacija za inteligentan odgovor."
            
            # Analiziraj memorije i generi≈°i odgovor
            response_parts = []
            response_parts.append("üß† **AI Inteligencija aktivirana:**\n")
            
            for memory in relevant_memories:
                # Dodaj relevantnu informaciju
                if memory.category == "interaction":
                    # Izvuci AI odgovor iz interakcije
                    lines = memory.content.split('\n')
                    if len(lines) > 1:
                        ai_part = lines[1].replace("AI: ", "")
                        response_parts.append(f"üí° **Iz prethodne interakcije:** {ai_part}")
                else:
                    response_parts.append(f"üìö **{memory.category.title()}:** {memory.content}")
                
                # Dodaj tagove ako postoje
                if memory.tags:
                    response_parts.append(f"üè∑Ô∏è **Tagovi:** {', '.join(memory.tags[:3])}")
                
                response_parts.append("")  # Prazan red
            
            # Dodaj learning insights
            learning_insights = self._get_learning_insights(context)
            if learning_insights:
                response_parts.append("üéì **AI Uƒçenje:**")
                response_parts.append(learning_insights)
                response_parts.append("")
            
            # Dodaj predlo≈æene akcije
            suggested_actions = self._generate_suggested_actions(context, relevant_memories)
            if suggested_actions:
                response_parts.append("üéØ **Predlo≈æene akcije:**")
                for action in suggested_actions:
                    response_parts.append(f"‚Ä¢ {action}")
                response_parts.append("")
            
            # Dodaj follow-up pitanja
            follow_up = self._generate_follow_up_questions(context, relevant_memories)
            if follow_up:
                response_parts.append("üí≠ **Follow-up pitanja:**")
                for question in follow_up:
                    response_parts.append(f"‚Ä¢ {question}")
            
            return "\n".join(response_parts)
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri generisanju inteligentnog odgovora: {e}")
            return "Izvinjavam se, do≈°lo je do gre≈°ke u AI inteligenciji."
    
    def _get_learning_insights(self, context: Dict[str, Any]) -> str:
        """Dohvata insights iz uƒçenja"""
        try:
            insights = []
            
            # Analiziraj learning patterns
            for pattern in self.learning_patterns.values():
                if pattern.success_rate > 0.8 and pattern.usage_count > 2:
                    insights.append(f"‚úÖ {pattern.pattern_type}: visok uspeh ({pattern.success_rate:.2f})")
                elif pattern.success_rate < 0.3 and pattern.usage_count > 1:
                    insights.append(f"‚ö†Ô∏è {pattern.pattern_type}: nizak uspeh ({pattern.success_rate:.2f})")
            
            return "\n".join(insights[:3]) if insights else "Nema novih insights-a"
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri dohvatanju learning insights: {e}")
            return "Nema insights-a"
    
    def _generate_suggested_actions(self, context: Dict[str, Any], memories: List[Memory]) -> List[str]:
        """Generi≈°e predlo≈æene akcije na osnovu memorija"""
        try:
            actions = []
            
            # Analiziraj memorije i generi≈°i akcije
            for memory in memories:
                if memory.category == "interaction" and memory.user_satisfaction > 0.7:
                    actions.append("Ponovi uspe≈°nu strategiju iz prethodne interakcije")
                elif memory.category == "preference" and "positive" in str(memory.tags):
                    actions.append(f"Koristi preferenciju: {memory.content}")
                elif memory.category == "general" and memory.importance > 0.8:
                    actions.append(f"Fokusiraj se na: {memory.content[:50]}...")
            
            return actions[:3] if actions else ["Nema predlo≈æenih akcija"]
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri generisanju predlo≈æenih akcija: {e}")
            return ["Nema predlo≈æenih akcija"]
    
    def _generate_follow_up_questions(self, context: Dict[str, Any], memories: List[Memory]) -> List[str]:
        """Generi≈°e follow-up pitanja na osnovu memorija"""
        try:
            questions = []
            
            # Analiziraj kontekst i memorije
            if "platform" in str(context).lower():
                questions.append("Da li ≈æelite da analiziram specifiƒçnu platformu?")
                questions.append("Kako vam se ƒçini trenutna strategija?")
            
            if "earning" in str(context).lower():
                questions.append("Da li ≈æelite da optimizujem zaradu?")
                questions.append("Koje platforme su vam najprofitabilnije?")
            
            if "problem" in str(context).lower():
                questions.append("Da li je problem re≈°en?")
                questions.append("Da li vam treba dodatna pomoƒá?")
            
            # Dodaj generalna pitanja
            questions.append("Da li imate jo≈° pitanja?")
            questions.append("Kako mogu da pobolj≈°am svoje odgovore?")
            
            return questions[:4] if questions else ["Nema follow-up pitanja"]
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri generisanju follow-up pitanja: {e}")
            return ["Nema follow-up pitanja"]
    
    def _analyze_emotional_tone(self, text: str) -> str:
        """Analizira emocionalni ton teksta"""
        try:
            text_lower = text.lower()
            
            positive_words = ["odliƒçno", "super", "hvala", "zadovoljan", "uspe≈°no", "dobro", "sreƒáan"]
            negative_words = ["problem", "gre≈°ka", "lo≈°e", "nezadovoljan", "frustriran", "te≈°ko", "te≈æak"]
            neutral_words = ["informacija", "pitanje", "odgovor", "sistem", "platforma", "nalog"]
            
            positive_count = sum(1 for word in positive_words if word in text_lower)
            negative_count = sum(1 for word in negative_words if word in text_lower)
            neutral_count = sum(1 for word in neutral_words if word in text_lower)
            
            if positive_count > negative_count:
                return "positive"
            elif negative_count > positive_count:
                return "negative"
            else:
                return "neutral"
                
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri analizi emocionalnog tona: {e}")
            return "neutral"
    
    def _cleanup_old_memories(self):
        """ƒåisti stare memorije"""
        try:
            # Sortiraj po va≈ænosti i pristupu
            memories_list = list(self.memories.items())
            memories_list.sort(key=lambda x: (x[1].importance, x[1].access_count), reverse=True)
            
            # Zadr≈æi top memorije
            keep_count = int(self.max_memories * 0.8)
            memories_to_remove = memories_list[keep_count:]
            
            for memory_id, memory in memories_to_remove:
                del self.memories[memory_id]
                
                # Ukloni iz indeksa
                if memory.id in self.category_index[memory.category]:
                    self.category_index[memory.category].remove(memory.id)
                for tag in memory.tags:
                    if memory.id in self.tag_index[tag]:
                        self.tag_index[tag].remove(memory.id)
            
            logger.info(f"üßπ Oƒçi≈°ƒáeno {len(memories_to_remove)} starih memorija")
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri ƒçi≈°ƒáenju memorija: {e}")
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """Vraƒáa statistiku memorija"""
        try:
            total_memories = len(self.memories)
            total_conversations = len(self.conversation_memories)
            total_patterns = len(self.learning_patterns)
            
            # Kategorije
            categories = defaultdict(int)
            for memory in self.memories.values():
                categories[memory.category] += 1
            
            # Tagovi
            tags = defaultdict(int)
            for memory in self.memories.values():
                for tag in memory.tags:
                    tags[tag] += 1
            
            # Top tagovi
            top_tags = sorted(tags.items(), key=lambda x: x[1], reverse=True)[:10]
            
            return {
                "total_memories": total_memories,
                "total_conversations": total_conversations,
                "total_patterns": total_patterns,
                "categories": dict(categories),
                "top_tags": top_tags,
                "memory_file_size": f"{len(self.memories) * 0.001:.2f} KB"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri dohvatanju statistike: {e}")
            return {"error": str(e)}
    
    def clear_memories(self, category: str = None):
        """Bri≈°e memorije (opciono po kategoriji)"""
        try:
            if category:
                # Bri≈°i samo odreƒëenu kategoriju
                memories_to_remove = [mid for mid, m in self.memories.items() if m.category == category]
                for mid in memories_to_remove:
                    del self.memories[mid]
                logger.info(f"üßπ Obrisane memorije kategorije: {category}")
            else:
                # Bri≈°i sve memorije
                self.memories.clear()
                self.conversation_memories.clear()
                self.learning_patterns.clear()
                logger.info("üßπ Sve memorije obrisane")
            
            self._save_memories()
            
        except Exception as e:
            logger.error(f"‚ùå Gre≈°ka pri brisanju memorija: {e}")

# Globalna instanca
memory_engine = None

def get_memory_engine() -> MemoryEngine:
    """Vraƒáa globalnu instancu Memory Engine-a"""
    global memory_engine
    if memory_engine is None:
        memory_engine = MemoryEngine()
    return memory_engine
